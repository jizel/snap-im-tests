import org.arquillian.spacelift.gradle.configuration.BuiltinConfigurationItemConverters
import travel.snapshot.qa.installation.MavenInstallation
import travel.snapshot.qa.DataPlatformTestOrchestration
import travel.snapshot.qa.installation.Docker
import travel.snapshot.qa.installation.DockerMachine
import travel.snapshot.qa.installation.DockerService
import travel.snapshot.qa.installation.GradleInstallation
import travel.snapshot.qa.installation.GitBasedInstallation
import travel.snapshot.qa.installation.TomcatInstallationResolver
import travel.snapshot.qa.test.DataPlatformTest
import travel.snapshot.qa.test.PlatformLifecycle
import travel.snapshot.qa.test.execution.api.APITestsExecution
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformBuildExecutor
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformModule
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformModules
import travel.snapshot.qa.test.execution.db.mariadb.MariaDBDropper
import travel.snapshot.qa.test.execution.db.mariadb.MariaDBInitializer
import travel.snapshot.qa.test.execution.db.tsv.TsvImporter
import travel.snapshot.qa.test.execution.load.LoadTestsConfiguration
import travel.snapshot.qa.test.execution.load.LoadTestsExecution
import travel.snapshot.qa.test.execution.load.LoadTestsModuleParser
import travel.snapshot.qa.test.execution.load.LoadTestsSimulation
import travel.snapshot.qa.test.execution.log.DataPlatformLogReporter
import travel.snapshot.qa.test.execution.report.ApiTestGuiReporter
import travel.snapshot.qa.test.execution.tomcat.DataPlatformDeployer
import travel.snapshot.qa.test.execution.tomcat.TomcatConfigurationDeployer
import travel.snapshot.qa.util.ProjectHelper
import travel.snapshot.qa.util.PropertyResolver

import static travel.snapshot.qa.docker.DockerServiceFactory.*
import static travel.snapshot.qa.test.execution.dataplatform.DataPlatformModule.PROJECT
import static travel.snapshot.qa.test.execution.dataplatform.DataPlatformModules.DATABASE_SCHEMES

apply plugin: 'org.arquillian.spacelift'

spacelift {

    workspace new File(project.rootDir, 'snapshot/workspace')
    cacheDir new File(project.rootDir, 'snapshot/cache')

    final DataPlatformTestOrchestration platform = new DataPlatformTestOrchestration()

    configuration {
        dockerInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { ['docker', 'dockerMachine'] }
        }
        serviceInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { ['tomcat', 'mariadb', 'mongodb', 'activemq'] }
        }
        loadTestsInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { PropertyResolver.resolveLoadTestsInstallations() }
        }
        loadTestsTestExecutions {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { PropertyResolver.resolveLoadTestsTestExecutions() }
        }
        dockerImages {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value {
                [
                        "docker.snapshot.travel:5000/snapshot/tomcat:8.0.32",
                        "docker.snapshot.travel:5000/snapshot/mariadb:10.1.12",
                        "docker.snapshot.travel:5000/snapshot/mongodb:3.2.3",
                        "docker.snapshot.travel:5000/snapshot/activemq:5.12.3"
                ]
            }
        }
        dockerMachine {
            value PropertyResolver.resolveDockerMachine()
        }
        dockerMachineMemorySize {
            value PropertyResolver.resolveDockerMachineMemorySize()
        }
        dockerMode {
            value PropertyResolver.resolveDockerMode()
        }
        connectionMode {
            value PropertyResolver.resolveConnectionMode()
        }
        testExecutionMode {
            value PropertyResolver.resolveTestExecutionMode()
        }
        dockerRegistryPassword {
            // you have to set systemProp.dockerRegistryPassword variable with Docker registry password in gradle.properties
            value PropertyResolver.resolveDockerRegistryPassword()
        }
        dataPlatformRepositories {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { ["dataPlatformRepository", "dataPlatformQARepository"] }
        }
        dataPlatformRepositoryUrl {
            value PropertyResolver.resolveDataPlatformRepositoryUrl()
        }
        dataPlatformRepository {
            value PropertyResolver.resolveDataPlatformRepository()
        }
        dataPlatformQARepositoryUrl {
            value PropertyResolver.resolveDataPlatformQARepositoryUrl()
        }
        dataPlatformQARepository {
            value PropertyResolver.resolveDataPlatformQARepository()
        }
        dataPlatformRepositoryCommit {
            value PropertyResolver.resolveDataPlatformRespositoryCommit("master")
        }
        dataPlatformRepositoryQACommit {
            value PropertyResolver.resolveDataPlatformRespositoryQACommit("master")
        }
        dataPlatformRepositoryCheckoutCommit {
            type Boolean
            value PropertyResolver.resolveDataPlatformRepositoryCheckoutCommit()
        }
        dataPlatformRepositoryQACheckoutCommit {
            type Boolean
            value PropertyResolver.resolveDataPlatformRepositoryQACheckoutCommit()
        }
        forceDataPlatformBuild {
            type Boolean
            value PropertyResolver.resolveForceDataPlatformBuild()
        }
        tomcatDeploymentStrategy {
            value PropertyResolver.resolveTomcatDeploymentStrategy()
        }
    }

    profiles {
        dataPlatform {
            enabledInstallations (dockerInstallations + serviceInstallations)
        }
        dataPlatformTest {
            enabledInstallations (dockerInstallations + serviceInstallations + dataPlatformRepositories + 'gradle')
        }
        platformStart(from: dataPlatform) {
            tests 'platformStart'
        }
        platformStop(from: dataPlatform) {
            tests 'platformStop'
        }
        platformBuild {
            enabledInstallations (dataPlatformRepositories + 'gradle')
            tests 'platformBuild'
        }
        apiTests(from: dataPlatformTest) {
            tests 'platformStart', 'apiTests', 'platformStop'
        }
        apiTestsWebPerformance(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsWebPerformance', 'platformStop'
        }
        apiTestsConfiguration(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsConfiguration', 'platformStop'
        }
        apiTestsSmoke(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsSmoke', 'platformStop'
        }
        loadTests {
            enabledInstallations loadTestsInstallations
            tests loadTestsTestExecutions
        }
    }

    installations {
        docker(from: Docker) {}
        dockerMachine(from: DockerMachine) {}

        tomcat(from: DockerService) {
            setup {
                new TomcatInstallationResolver(platform).resolve()
            }
        }
        mariadb(from: DockerService) {
            setup {
                platform.with(mariadb().init())
            }
        }
        mongodb(from: DockerService) {
            setup {
                platform.with(mongodb().init())
            }
        }
        activemq(from: DockerService) {
            setup {
                platform.with(activemq().init())
            }
        }

        maven(from: MavenInstallation) {}

        gradle(from: GradleInstallation) {}

        dataPlatformRepository(from: GitBasedInstallation) {
            repository dataPlatformRepositoryUrl
            commit dataPlatformRepositoryCommit
            checkoutCommit dataPlatformRepositoryCheckoutCommit
            home dataPlatformRepository
        }
        dataPlatformQARepository(from: GitBasedInstallation) {
            repository dataPlatformQARepositoryUrl
            commit dataPlatformRepositoryQACommit
            checkoutCommit dataPlatformRepositoryQACheckoutCommit
            home dataPlatformQARepository
        }
    }

    tests {

        // Platform lifecycles

        platformStart(from: PlatformLifecycle) {
            with platform
            init {  new TomcatConfigurationDeployer(dockerMachine).deploy() }
            execute {
                new MariaDBDropper(platform).drop(DATABASE_SCHEMES).execute()
                new MariaDBInitializer(platform).init(DATABASE_SCHEMES).execute()
            }
            teardown false
        }
        platformStop(from: PlatformLifecycle) {
            with platform
            setup false
        }

        // Building of Data Platform

        platformBuild(from: DataPlatformTest) {
            execute {  new DataPlatformBuildExecutor().build(PROJECT).execute(true) }
        }

        // reporting

        reportableTest(from: DataPlatformTest) {
            report {
                if (ProjectHelper.dockerUsed) {
                    new DataPlatformLogReporter(platform, serviceInstallations).report()
                }
                if (ProjectHelper.apiTestRunning) {
                    ApiTestGuiReporter.report()
                }
            }
        }

        ////////////////////
        //
        // API tests
        //
        ////////////////////

        apiTests(inherits: reportableTest) {
            beforeSuite {
                new TsvImporter(platform).execute()
            }
        }

        apiTestsWebPerformance(inherits: apiTests) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.WEB_PERFORMANCE).execute(forceDataPlatformBuild)
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.WEB_PERFORMANCE).execute()
            }
            execute { new APITestsExecution("RunWebPerformanceTests").execute() }
        }

        apiTestsConfiguration(inherits: apiTests) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.CONFIGURATION).execute(forceDataPlatformBuild)
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.CONFIGURATION).execute()
            }
            execute { new APITestsExecution("RunConfigurationTests").execute() }
        }

        apiTestsSmoke(inherits: apiTests) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModules.SMOKE.modules()).execute(forceDataPlatformBuild)
                new DataPlatformDeployer(platform).deploy(DataPlatformModules.SMOKE.modules()).execute()
            }
            execute {
                new APITestsExecution("RunSmokeTests").execute()
            }
        }

        ////////////////////
        //
        // LOAD TESTS
        //
        ////////////////////

        loadTests(inherits: reportableTest) {

            // Simulations to run are set by one of these:
            //
            // -DloadTestSimulations=all|configuration|identity|web_performance|rate_shopper|social|tripadvisor
            //
            // Load test environment is set by one of these:
            //
            // -DloadTestEnvironment=local|production|development|testing|docker
            //
            // Default is 'all' simulations against 'docker' environment

            data {
                LoadTestsConfiguration.parse(platform)
            }
            execute { List data ->
                new LoadTestsExecution((LoadTestsSimulation) data.get(0), (LoadTestsConfiguration) data.get(1)).execute()
            }
        }

        loadTestsDeployment {

            // Modules are deployed only in case load test environment is 'docker'. In other cases,
            // we expect that modules are already deployed in a target load test environment.

            execute {
                new DataPlatformBuildExecutor()
                        .build(LoadTestsModuleParser.parse())
                        .execute(forceDataPlatformBuild)

                new DataPlatformDeployer(platform)
                        .deploy(LoadTestsModuleParser.parse())
                        .execute()
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven {
            name 'snapshot'
            url 'https://nexus.snapshot.travel/content/groups/public'
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath 'com.github.smiklosovic:arquillian-spacelift-gradle:1.0.4.Final'
        classpath 'travel.snapshot.qa.manager:docker-manager:1.0.4'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.9' }
