server {
    # Embedded docker DNS
    resolver 127.0.0.11 ipv6=off;

    include cors.conf;

    error_log logs/error.log debug; # NOTE: Do not use in production!

    location /v1 {
        access_by_lua_file ../lualib/custom/access-control.lua;

        proxy_pass "http://identity_backend/api";
    }

    location = /v1/identity/authentication/authenticate {
        proxy_pass "http://identity_backend/api/identity/authentication/authenticate";
    }


    
    location = /oauth/auth/actions/logout {
        proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/logout";

        header_filter_by_lua '
            local oauth_flow = require "oauth-flow"
            oauth_flow.replace_cookies_for_sso(ngx.header.Set_Cookie, "/oauth/auth")
        ';
    }

    # Deprecated: Use "/oauth/auth/actions/logout" instead
    location = /auth/actions/logout {
        rewrite .* /oauth/auth/actions/logout permanent;
    }

    location = /oauth/token {
        content_by_lua_block {
            local oauth_flow = require "oauth-flow"
            local response = oauth_flow.keycloak_post_call("/_keycloak/token", "/oauth/auth");
        }
    }

    location /_keycloak/token {
        internal;

        proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/token";
    }

#    location /v1/configuration {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://configuration_backend/api/configuration";
#    }
#
#    location /v1/social_media/analytics/facebook {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://facebook_api_backend/api/social_media/analytics/facebook";
#    }
#
#    location /v1/social_media/analytics/twitter {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://twitter_api_backend/api/social_media/analytics/twitter";
#    }
#
#    location /v1/social_media/analytics/instagram {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://instagram_api_backend/api/social_media/analytics/instagram";
#    }
#
#    location /v1/social_media/analytics {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://social_media_backend/api/social_media/analytics";
#    }
#
#    location /v1/web_performance {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://google_api_backend/api/web_performance";
#    }
#
#    location /v1/review {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://review_backend/api/review";
#    }
#
#    location /v1/rate_shopper {
#        access_by_lua_file ../lualib/custom/access-control.lua;
#        proxy_pass "http://rateshopper_backend/api/rate_shopper";
#    }

    location /oauth/auth {
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;

        proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/auth/";

        header_filter_by_lua '
            local oauth_flow = require "oauth-flow"
            oauth_flow.replace_cookies_for_sso(ngx.header.Set_Cookie, "/oauth/auth")
        ';

        sub_filter "/auth/resources/3.2.1.final/login" "/oauth/auth/resources";
        sub_filter "/auth/realms/Snapshot/login-actions" "/oauth/auth/actions";
        sub_filter_once off;
    }

    location /oauth/auth/resources {
        rewrite ^/oauth/auth/resources/(.*)$ /auth/resources/3.2.1.final/login/$1 break;

        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;

        proxy_pass "http://keycloak_backend";
    }

    location = /oauth/auth/actions/authenticate {
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;

        proxy_pass "http://keycloak_backend/auth/realms/Snapshot/login-actions/authenticate";

        header_filter_by_lua '
            local oauth_flow = require "oauth-flow"
            oauth_flow.replace_cookies_for_sso(ngx.header.Set_Cookie, "/oauth/auth")
        ';

        proxy_redirect "http://$http_host/auth/realms/Snapshot/login-actions" "http://$http_host/oauth/auth/actions";

        sub_filter "/auth/resources/3.2.1.final/login" "/oauth/auth/resources";
        sub_filter "/auth/realms/Snapshot/login-actions" "/oauth/auth/actions";
        sub_filter_once off;
    }

}
