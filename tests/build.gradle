import org.arquillian.spacelift.gradle.configuration.BuiltinConfigurationItemConverters
import travel.snapshot.qa.DataPlatformTestOrchestration
import travel.snapshot.qa.installation.*
import travel.snapshot.qa.installation.service.JBossStandaloneService
import travel.snapshot.qa.installation.service.MariaDBKeycloakService
import travel.snapshot.qa.manager.activemq.impl.docker.ActiveMQService
import travel.snapshot.qa.manager.generic.configuration.GenericConfiguration
import travel.snapshot.qa.manager.generic.impl.docker.GenericService
import travel.snapshot.qa.manager.mariadb.impl.docker.MariaDBService
import travel.snapshot.qa.manager.mongodb.impl.docker.MongoDBService
import travel.snapshot.qa.manager.redis.impl.docker.RedisService
import travel.snapshot.qa.manager.tomcat.docker.TomcatService
import travel.snapshot.qa.test.DataPlatformTest
import travel.snapshot.qa.test.PlatformLifecycle
import travel.snapshot.qa.test.execution.api.APITestsExecution
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformApiBuildExecutor
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformBuildExecutor
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformModule
import travel.snapshot.qa.test.execution.dataplatform.DataPlatformModules
import travel.snapshot.qa.test.execution.db.mariadb.MariaDBDropper
import travel.snapshot.qa.test.execution.db.mariadb.MariaDBInitializer
import travel.snapshot.qa.test.execution.db.tsv.TsvImporter
import travel.snapshot.qa.test.execution.load.LoadTestsConfiguration
import travel.snapshot.qa.test.execution.load.LoadTestsExecution
import travel.snapshot.qa.test.execution.load.LoadTestsModuleParser
import travel.snapshot.qa.test.execution.load.LoadTestsSimulation
import travel.snapshot.qa.test.execution.log.ContainerLogReporter
import travel.snapshot.qa.test.execution.nginx.NginxConfigurationDeployer
import travel.snapshot.qa.test.execution.report.ApiTestGuiReporter
import travel.snapshot.qa.test.execution.report.LoadTestGuiReporter
import travel.snapshot.qa.test.execution.threescale.ThreeScaleUploadExecutor
import travel.snapshot.qa.test.execution.tomcat.DataPlatformDeployer
import travel.snapshot.qa.test.execution.tomcat.TomcatConfigurationDeployer
import travel.snapshot.qa.util.ProjectHelper
import travel.snapshot.qa.util.Properties

import static travel.snapshot.qa.test.execution.dataplatform.DataPlatformModule.PROJECT
import static travel.snapshot.qa.test.execution.dataplatform.DataPlatformModules.DATABASE_SCHEMES

apply plugin: 'org.arquillian.spacelift'

spacelift {

    workspace new File(project.rootDir, 'snapshot/workspace')
    cacheDir new File(project.rootDir, 'snapshot/cache')

    final DataPlatformTestOrchestration platform = new DataPlatformTestOrchestration()

    configuration {

        // Installations

        dockerInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { Properties.Docker.Installation.resolveDockerInstallations() }
        }
        serviceInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { Properties.Docker.Installation.DATA_PLATFORM_INSTALLATIONS }
        }
        keycloakServiceInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { Properties.Docker.Installation.KEYCLOAK_PLATFORM_INSTALLATIONS }
        }
        loadTestsInstallations {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { Properties.LoadTest.installations }
        }
        loadTestsTestExecutions {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { Properties.LoadTest.testExecutions }
        }

        // Docker

        dockerImages {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value {
                [
                        "docker.snapshot.travel:5000/snapshot/tomcat:8.0.33",
                        "docker.snapshot.travel:5000/snapshot/mariadb:10.1.13",
                        "docker.snapshot.travel:5000/snapshot/mongodb:3.2.4",
                        "docker.snapshot.travel:5000/snapshot/activemq:5.12.3",
                        "docker.snapshot.travel:5000/snapshot/keycloak:1.9.1",
                        // build this container locally, it is not pushed in registry yet
                        //"jumarko/nginx-lua:latest",
                        "redis:3.0.7"
                ]
            }
        }
        dockerMachine {
            value Properties.Docker.machineName
        }
        dockerMachineMemorySize {
            value Properties.Docker.machineMemorySize
        }
        dockerMode {
            value Properties.Docker.mode
        }
        connectionMode {
            value Properties.Docker.connectionMode
        }
        testExecutionMode {
            value Properties.Test.executionMode
        }
        dockerRegistryPassword {
            // you have to set systemProp.dockerRegistryPassword variable with Docker registry password in gradle.properties
            value Properties.Docker.registryPassword
        }
        dataPlatformRepositories {
            converter BuiltinConfigurationItemConverters.getConverter(String[])
            value { ["dataPlatformRepository", "dataPlatformQARepository"] }
        }
        tomcatDeploymentStrategy {
            value Properties.Tomcat.deploymentStrategy
        }

        // DataPlatform

        dataPlatformRepositoryUrl {
            value Properties.DP.repositoryUrl
        }
        dataPlatformRepository {
            value Properties.DP.repository
        }
        dataPlatformRepositoryCommit {
            value Properties.DP.getRepositoryCommit("master")
        }
        dataPlatformRepositoryCheckoutCommit {
            type Boolean
            value Properties.DP.repositoryCheckoutCommit
        }

        // DataPlatform QA

        dataPlatformQARepositoryUrl {
            value Properties.QA.repositoryUrl
        }
        dataPlatformQARepository {
            value Properties.QA.repository
        }
        dataPlatformRepositoryQACommit {
            value Properties.QA.getRepositoryCommit("master")
        }
        dataPlatformRepositoryQACheckoutCommit {
            type Boolean
            value Properties.QA.repositoryCheckoutCommit
        }

        // DataPlatform API

        dataPlatformRepositoryApiUrl {
            value Properties.API.repositoryUrl
        }
        dataPlatformApiRepository {
            value Properties.API.repository
        }
        dataPlatformRepositoryApiCommit {
            value Properties.API.getRepositoryCommit("origin/master")
        }
        dataPlatformRepositoryApiCheckoutCommit {
            type Boolean
            value Properties.API.repositoryCheckoutCommit
        }

        // operations repository

        operationsRepositoryUrl {
            value Properties.Operations.repositoryUrl
        }
        operationsRepository {
            value Properties.Operations.repository
        }
        operationsRepositoryCommit {
            value Properties.Operations.getRepositoryCommit("origin/master")
        }
        operationsRepositoryCheckoutCommit {
            value Properties.Operations.repositoryCheckoutCommit
        }
    }

    profiles {
        dataPlatform {
            enabledInstallations (dockerInstallations + serviceInstallations)
        }
        dataPlatformTest {
            enabledInstallations (dockerInstallations + serviceInstallations + dataPlatformRepositories + 'gradle')
        }
        platformStart(from: dataPlatform) {
            tests 'platformStart'
        }
        platformStop(from: dataPlatform) {
            tests 'platformStop'
        }
        platformBuild {
            enabledInstallations (dataPlatformRepositories + 'gradle')
            tests 'platformBuild'
        }
        apiTests(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsBase', 'platformStop'
        }

        review(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsReview', 'platformStop'
        }

        social_media(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsSocialMedia', 'platformStop'
        }

        facebook(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsFacebook', 'platformStop'
        }

        instagram(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsInstagram', 'platformStop'
        }

        twitter(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsTwitter', 'platformStop'
        }

        identity(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsIdentity', 'platformStop'
        }

        configuration(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsConfiguration', 'platformStop'
        }

        authorization(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsAuthorization', 'platformStop'
        }

        web_performance(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsWebPerformance', 'platformStop'
        }

        rate_shopper(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsRateShopper', 'platformStop'
        }

        eventing(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsEventing', 'platformStop'
        }

        smoke(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsSmoke', 'platformStop'
        }

        all(from: dataPlatformTest) {
            tests 'platformStart', 'apiTestsAll', 'platformStop'
        }

        loadTests {
            enabledInstallations loadTestsInstallations
            tests loadTestsTestExecutions
        }

        threeScaleJsonUpload {
            enabledInstallations 'maven'
            tests 'threeScaleJsonUploadExecution'
        }

        keycloakPlatformStart(from: dataPlatformTest) {
            // gradle is needed when building identity module from dataPlatformRepository installation
            enabledInstallations (dockerInstallations + keycloakServiceInstallations + "dataPlatformRepository" + "operationsRepository" + "gradle")
            tests 'keycloakPlatformStart', 'keycloakTest'
        }
        keycloakPlatformStop(from: dataPlatformTest) {
            enabledInstallations (dockerInstallations + keycloakServiceInstallations)
            tests 'platformStop'
        }
        oauthLoadTest {
            enabledInstallations ('maven', 'dataPlatformQARepository')
            tests 'loadTests'
        }
    }

    installations {
        docker(from: Docker) {}
        dockerMachine(from: DockerMachine) {}

        tomcat(from: DockerService) {
            setup {
                new TomcatInstallationResolver(platform).resolve()
            }
        }
        mariadb(from: DockerService) {
            setup {
                platform.with(new MariaDBService().init())
            }
        }
        mongodb(from: DockerService) {
            setup {
                platform.with(new MongoDBService().init())
            }
        }
        activemq(from: DockerService) {
            setup {
                platform.with(new ActiveMQService().init())
            }
        }
        mariadbkey(from: DockerService) {
            setup {
                platform.with(MariaDBKeycloakService.init("mariadbkey"))
            }
        }
        tomcatkey(from: DockerService) {
            setup {
                platform.with(new TomcatService().init("tomcatkey"))
            }
        }
        keycloak(from: DockerService) {
            setup {
                platform.with(JBossStandaloneService.init("keycloak"))
            }
        }
        nginx(from: DockerService) {
            setup {
                platform.with(new GenericService().init(new GenericConfiguration.Builder().setBindPort(8899).build(), "nginx"))
            }
        }
        redis(from: DockerService) {
            setup {
                platform.with(new RedisService().init())
            }
        }

        maven(from: MavenInstallation) {}

        gradle(from: GradleInstallation) {}

        dataPlatformRepository(from: GitBasedInstallation) {
            repository dataPlatformRepositoryUrl
            commit dataPlatformRepositoryCommit
            checkoutCommit dataPlatformRepositoryCheckoutCommit
            home dataPlatformRepository
        }
        dataPlatformQARepository(from: GitBasedInstallation) {
            repository dataPlatformQARepositoryUrl
            commit dataPlatformRepositoryQACommit
            checkoutCommit dataPlatformRepositoryQACheckoutCommit
            home dataPlatformQARepository
        }
        dataPlatformApiRepository(from: GitBasedInstallation) {
            repository dataPlatformRepositoryApiUrl
            commit dataPlatformRepositoryApiCommit
            checkoutCommit dataPlatformRepositoryApiCheckoutCommit
            home dataPlatformApiRepository
        }
        operationsRepository(from: GitBasedInstallation) {
            repository operationsRepositoryUrl
            commit operationsRepositoryCommit
            checkoutCommit operationsRepositoryCheckoutCommit
            home operationsRepository
        }
    }

    tests {

        // Platform lifecycles

        platformStart(from: PlatformLifecycle) {
            with platform
            init { new TomcatConfigurationDeployer(Properties.Docker.machineName).deploy() }
            execute {
                new MariaDBDropper(platform).drop(DATABASE_SCHEMES).execute()
                new MariaDBInitializer(platform).init(DATABASE_SCHEMES).execute()
            }
            teardown false
        }
        platformStop(from: PlatformLifecycle) {
            with platform
            setup false
        }
        keycloakPlatformStart(from: PlatformLifecycle) {
            with platform
            teardown false
            init {
                new TomcatConfigurationDeployer(Properties.Docker.machineName).deploy()
                new NginxConfigurationDeployer(Properties.Docker.machineName).deploy()
            }
            execute {
                new MariaDBDropper(platform).drop(DATABASE_SCHEMES).container("mariadbkey").execute()
                new MariaDBInitializer(platform).init(DATABASE_SCHEMES).container("mariadbkey").execute()
            }
        }

        // Building of Data Platform

        platformBuild(from: DataPlatformTest) {
            execute { new DataPlatformBuildExecutor().build(PROJECT).execute() }
        }

        // reporting

        reportableTest(from: DataPlatformTest) {
            report {
                // oauth load tests are not dockerized
                if (!ProjectHelper.isProfileSelected("oauthLoadTest")) {
                    new ContainerLogReporter(platform, serviceInstallations).report()
                    ApiTestGuiReporter.report()
                }
            }
        }

        ////////////////////
        //
        // API TESTS
        //
        ////////////////////

        apiTestsBase(inherits: reportableTest) {
            beforeSuite {
                new TsvImporter(platform).execute()
            }
        }

        apiTestsReview(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.REVIEW).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.REVIEW).execute()
            }
            execute { new APITestsExecution("RunReview*").execute() }
        }

        apiTestsSocialMedia(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.SOCIAL_MEDIA_API).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.SOCIAL_MEDIA_API).execute()
            }
            execute { new APITestsExecution("RunSocialMediaCommonTests").execute() }
        }

        apiTestsFacebook(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.FACEBOOK_SERVICE_API).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.FACEBOOK_SERVICE_API).execute()
            }
            execute { new APITestsExecution("RunSocialMediaFacebookTests").execute() }
        }

        apiTestsInstagram(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.INSTAGRAM_SERVICE_API).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.INSTAGRAM_SERVICE_API).execute()
            }
            execute { new APITestsExecution("RunSocialMediaInstagramTests").execute() }
        }

        apiTestsTwitter(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.TWITTER_SERVICE_API).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.TWITTER_SERVICE_API).execute()
            }
            execute { new APITestsExecution("RunSocialMediaTwitterTests").execute() }
        }

        apiTestsIdentity(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.IDENTITY).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.IDENTITY).execute()
            }
            execute { new APITestsExecution("RunIdentity*").execute() }
        }

        apiTestsConfiguration(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.CONFIGURATION).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.CONFIGURATION).execute()
            }
            execute { new APITestsExecution("RunConfigurationTests").execute() }
        }

        apiTestsWebPerformance(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.WEB_PERFORMANCE).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.WEB_PERFORMANCE).execute()
            }
            execute { new APITestsExecution("RunWebPerformanceTests").execute() }
        }

        apiTestsRateShopper(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.RATE_SHOPPER).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.RATE_SHOPPER).execute()
            }
            execute { new APITestsExecution("RunRateShopperTests").execute() }
        }

        apiTestsEventing(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(DataPlatformModule.CONFIGURATION, DataPlatformModule.IDENTITY).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModule.CONFIGURATION, DataPlatformModule.IDENTITY).execute()
            }
            execute { new APITestsExecution("RunEventingCrudTests").execute() }
        }

//        apiTestsAuthorization(inherits: apiTestsBase) {
//            beforeTest {
//                new DataPlatformBuildExecutor().build(DataPlatformModule.IDENTITY).execute()
//                new DataPlatformDeployer(platform).deploy(DataPlatformModule.IDENTITY).execute()
//            }
//            execute { new APITestsExecution("RunAuthorizationTests").execute() }
//        }

        apiTestsSmoke(inherits: apiTestsBase) {
            beforeTest {
                // it is just faster to build whole project when executing smoke tests then build all modules one by one
                new DataPlatformBuildExecutor().build(PROJECT).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModules.SMOKE.modules()).execute()
            }
            execute {
                new APITestsExecution("RunSmokeTests").execute()
            }
        }

        apiTestsAll(inherits: apiTestsBase) {
            beforeTest {
                new DataPlatformBuildExecutor().build(PROJECT).execute()
                new DataPlatformDeployer(platform).deploy(DataPlatformModules.ALL.modules()).execute()
            }
            execute {
                new APITestsExecution().execute()
            }
        }

        ////////////////////
        //
        // LOAD TESTS
        //
        ////////////////////

        loadTests(inherits: reportableTest) {

            // Simulations to run are set by one of these:
            //
            // -DloadTestSimulations=all|configuration|identity|web_performance|rate_shopper|social|tripadvisor|oauth
            //
            // Load test environment is set by one of these:
            //
            // -DloadTestEnvironment=local|production|development|testing|docker|nginx
            //
            // Load test host is set by system property 'loadTestHost'. If empty, default host according to 'loadTestEnvironment' is chosen.
            // Load test port is set by system property 'loadTestPort'. If empty, 8080 port is chosen.
            //
            // Default is 'all' simulations against 'docker' environment
            //
            // In case you want to try nginx load tests where oauth token is being generated, you basically have to start it like this
            // gradle test -Pprofile=oauthLoadTest -DloadTestSimulations=oauth -DloadTestEnvironment=nginx -DoauthClientId=TestClient \
            //  -DoauthClientSecret=9b28e628-20b7-4a2c-9607-79f43d35069c -DloadTestRamp=120 -DloadTestEndUsers=60

            data {
                LoadTestsConfiguration.parse()
            }
            execute { List data ->
                new LoadTestsExecution((LoadTestsSimulation) data.get(0), (LoadTestsConfiguration) data.get(1)).execute()
            }
            afterTest { List data ->
                LoadTestGuiReporter.report((LoadTestsSimulation) data.get(0))
            }
        }

        loadTestsDeployment {

            // Modules are deployed only in case load test environment is 'docker'. In other cases,
            // we expect that modules are already deployed in a target load test environment.

            execute {
                new DataPlatformBuildExecutor()
                        .build(LoadTestsModuleParser.parse())
                        .execute()

                new DataPlatformDeployer(platform)
                        .deploy(LoadTestsModuleParser.parse())
                        .execute()
            }
        }

        // 3scale JSON upload

        threeScaleJsonUploadExecution {
            execute {
                new DataPlatformApiBuildExecutor().execute()
                new ThreeScaleUploadExecutor().execute()
            }
        }

        // Keycloak setup

        keycloakTest {
            beforeTest {
                new DataPlatformBuildExecutor()
                        .build(DataPlatformModule.IDENTITY)
                        .build(DataPlatformModule.CONFIGURATION)
                        .execute()

                new DataPlatformDeployer(platform).container("tomcatkey")
                        .deploy(DataPlatformModule.IDENTITY)
                        .deploy(DataPlatformModule.CONFIGURATION)
                        .execute()
            }
            execute {
                println "keycloak test"
            }
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven {
            name 'snapshot'
            url 'https://nexus.snapshot.travel/content/groups/public'
            credentials {
                username nexusUser
                password nexusPassword
            }
        }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        classpath 'com.github.smiklosovic:arquillian-spacelift-gradle:1.0.5.Final'
        classpath 'travel.snapshot.qa.manager:docker-manager:1.0.10'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '2.9' }
