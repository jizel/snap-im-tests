server {
    lua_code_cache on;
    listen 80;

    server_name _;
    underscores_in_headers on;
	
    include cors.conf;

    # Proxy parameters
    proxy_buffering on;
    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;
	
    # Cookie Too Large fix
    large_client_header_buffers 4 16k;

    # Configure client in keycloak to allow service accounts, add only user-creation role to it and obtain access token
    # through 'client credentials grant' OAuth flow
    location /v1/identity/users {
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;
      set $provider_key 1b1483ccc5832b0978bf136348e32808;
      set $service_id 2555417730620;

      if ($internals = 0) {
        access_by_lua_file conf/check_token.lua;
      }

      proxy_pass "http://identity_backend/api/identity/users";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;

      post_action /handle_deleted_inactive_users;
    }
	
	# This endpoint is used for authentication, no access token should be needed in this case, nor reporting to 3scale
    location = /v1/identity/authentication/authenticate {
      proxy_pass "http://identity_backend/api/identity/authentication/authenticate";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
    }

    location /v1/identity {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id 2555417730620;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;

      proxy_ignore_client_abort on;

      if ($internals = 0) {
        access_by_lua_file conf/check_token.lua;
      }

      proxy_pass "http://identity_backend/api/identity";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;
    }


    location /v1/dwh/  {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id 2555417730620;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;

      proxy_ignore_client_abort on;

      if ($internals = 0) {
        access_by_lua_file conf/check_token.lua;
      }
	  
	  # App on Kubernetes - needs to have proper host header
      proxy_set_header  Host  "euf-dwh-stable.snapshot.technology";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass "http://dwh_backend/v1/dwh/";
      proxy_read_timeout 600;
      proxy_buffering off;
    }

    location /v1/dwh/info {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id 2555417730620;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;

      proxy_ignore_client_abort on;

      if ($internals = 0) {
        access_by_lua_file conf/check_token.lua;
      }

	  # App on Kubernetes - needs to have proper host header
      proxy_set_header  Host  "euf-dwh-stable.snapshot.technology";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass "http://dwh_backend/info";
    }

	location /v1 {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id 2555417730620;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;

      proxy_ignore_client_abort on;

      if ($internals = 0) {
        access_by_lua_file conf/check_token.lua;
      }

      proxy_pass "http://identity_backend/api";
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;
    }
 	
    location /oauth/userinfo {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/userinfo";
    }

    location /oauth/auth {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      set $provider_key 1b1483ccc5832b0978bf136348e32808;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/auth/";

      header_filter_by_lua '
        local oauth_flow = require "oauth_flow"
        oauth_flow.replace_cookies_for_sso(ngx.header.Set_Cookie)
      ';

      #in returned response there are links to static resources or links to keycloak, we want to rewrite it
      sub_filter "/auth/resources/1.9.8.final/login/keycloak" "/auth/resources";
      sub_filter "/auth/realms/Snapshot/login-actions" "/auth/actions";

      sub_filter_once off;

      #in case of SSO, we have token in Location, without going through authenticate
      post_action /store_token_from_header;

    }

    location /store_token_from_header {
      internal;

      access_by_lua '
        local oauth_flow = require "oauth_flow"
        oauth_flow.store_token_from_header(ngx.header.Location)
      ';
    }

    #to serve static content
    location /auth/resources {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
    
      proxy_pass "http://keycloak_backend/auth/resources/1.9.8.final/login/keycloak";
    }

    location = /auth/actions/authenticate {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      set $provider_key 1b1483ccc5832b0978bf136348e32808;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/login-actions/authenticate";

      header_filter_by_lua '
        local oauth_flow = require "oauth_flow"
        oauth_flow.replace_cookies_for_sso(ngx.header.Set_Cookie)
      ';

      proxy_redirect "https://$http_host/auth/realms/Snapshot/login-actions" "https://$http_host/auth/actions";

      #in returned response there are links to static resources or links to keycloak, we want to rewrite it
      sub_filter "/auth/resources/1.9.8.final/login/keycloak" "/auth/resources";
      sub_filter "/auth/realms/Snapshot/login-actions" "/auth/actions";

      sub_filter_once off;

      post_action /store_token_from_header;

    }

    location /auth/actions {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/login-actions";

      proxy_redirect "https://$http_host/auth/realms/Snapshot/login-actions" "https://$http_host/auth/actions";

      sub_filter "/auth/resources/1.9.8.final/login/keycloak" "/auth/resources";
      sub_filter "/auth/realms/Snapshot/login-actions" "/auth/actions";

      sub_filter_once off;
    }


    location = /auth/actions/logout {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;

      set $id_token_hint $arg_id_token_hint;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/logout";

      sub_filter "/auth/resources/1.9.8.final/login/keycloak" "/auth/resources";
      sub_filter "/auth/realms/Snapshot/login-actions" "/auth/actions";

      sub_filter_once off;

      post_action /handle_logged_out_user;
    }

    location /oauth/token {
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;
      set $provider_key 1b1483ccc5832b0978bf136348e32808;

      #we need to read whole response in order to parse access_token, doing so with body_filter_by_lua is cumbersome due to
      #streaming nature and chunks -> resorted to subrequests
      content_by_lua '
        local oauth_flow = require "oauth_flow"
        local response = oauth_flow.keycloak_post_call("/_keycloak/token");
         oauth_flow.store_token_from_payload(response)
      ';
    }

    location /handle_deleted_inactive_users {
      internal;

      access_by_lua '
        local users = require "handle_users"
        users.handle_inactive_deleted_users()
      ';

    }

    location /handle_logged_out_user {
      internal;

      access_by_lua '
        local users = require "handle_users"
        users.handle_logged_out_users()
      ';
      #we do not report usage on logout as we do not for login either

    }

    location /_keycloak/token {
      internal;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header  Host $http_host;

      proxy_pass "http://keycloak_backend/auth/realms/Snapshot/protocol/openid-connect/token";
    }

    # Server identification - eg. for TM or loadbalancer
    location /_identification {
      alias /usr/local/openresty/nginx/html;
    }

    location = / {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      set $service_id 2555417730620;
      set $proxy_pass null;
      set $secret_token null;
      set $access_token null;

      proxy_ignore_client_abort on;

      if ($internals = 0) {
          access_by_lua_file conf/check_token.lua;
      }

      proxy_pass $proxy_pass;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;
    }
  }